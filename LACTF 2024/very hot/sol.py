from Crypto.Util.number import long_to_bytes


n = 10565111742779621369865244442986012561396692673454910362609046015925986143478477636135123823568238799221073736640238782018226118947815621060733362956285282617024125831451239252829020159808921127494956720795643829784184023834660903398677823590748068165468077222708643934113813031996923649853965683973247210221430589980477793099978524923475037870799
e = 65537
c = 9953835612864168958493881125012168733523409382351354854632430461608351532481509658102591265243759698363517384998445400450605072899351246319609602750009384658165461577933077010367041079697256427873608015844538854795998933587082438951814536702595878846142644494615211280580559681850168231137824062612646010487818329823551577905707110039178482377985


p1 = 21942765653871439764422303472543530148312720769660663866142363370143863717044484440248869144329425486818687730842077
p2 = 481484964540720113472607671311958003544610499422246847987589354560178323791038264141087579324461879222750445224381527035495936943975826481974450340297411968236802328325641633227089888411307197205354087888800340238955852318668831387

# Case 1
n_case1 = p1*(p1+6)*(p1+12)
if (n == n_case1):
    print('Case 1')
    p = p1
    q = p1+6
    r = p1+12

# Case 2
n_case2 = (p1-6)*p1*(p1+6)
if (n == n_case2):
    print('Case 2')
    
# Case 3
n_case3 = (p1-12)*(p1-6)*p1
if (n == n_case3):
    print('Case 3')
    
phi = (p-1)*(q-1)*(r-1)

# Calculate modinv
d = pow(e, -1, phi)
print(f'd: {d}')

# Decrypt
m = pow(c, d, n)
print(long_to_bytes(m))